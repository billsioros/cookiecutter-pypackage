[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "cookiecutter-pypackage"
version = "1.0.2"
description = "üêçüç™ Another Python Cookiecutter"
readme = "README.md"
authors = ["billsioros <billsioros97@gmail.com>"]
license = "MIT"
homepage = "https://billsioros.github.io/cookiecutter-pypackage"
repository = "https://github.com/billsioros/cookiecutter-pypackage"
keywords = []
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/billsioros/cookiecutter-pypackage/issues"
"Changelog" = "https://github.com/billsioros/cookiecutter-pypackage/releases"

[tool.poetry.dependencies]
python = "^3.9"

[tool.poetry.group.dev.dependencies]
python-semantic-release = "*"
isort = "*"
pre-commit = "*"
poethepoet = "*"
pytest = "*"
pytest-sugar = "*"
pytest-clarity = "*"
mkdocs = "*"
mkdocs-material = "*"
mkdocs-minify-plugin = "*"
mkdocs-redirects = "*"
mdx-truly-sane-lists = "*"
mike = "*"
pytest-cookies = "*"
black = "*"
ruff = "*"

[tool.semantic_release]
upload_to_pypi = false
version_toml = "pyproject.toml:tool.poetry.version"
changelog_components = "semantic_release.changelog.changelog_headers,semantic_release.changelog.compare_url"
build_command = false

[tool.poe.tasks]
clean = { cmd = "rm -rf ./**/__pycache__ dist site .pytest_cache", help = "Clean up any auxiliary files" }
format = { shell = "poetry run isort .; poetry run black .", help = "Format your codebase" }
hooks = { cmd = "poetry run pre-commit run --all-files", help = "Run all pre-commit hooks" }
test = { cmd = "poetry run pytest --cov=cookiecutter-pypackage", help = "Run the test suite" }
lint = { cmd = "poetry run ruff check src", help = "Lint your code for errors" }
docs = { shell = "python -c 'import webbrowser; webbrowser.open(\"http://127.0.0.1:8000\")'; poetry run mkdocs serve", help = "Build and serve the documentation" }
export = { cmd = "poetry export --without-hashes --dev -o requirements.txt" }

[tool.pytest.ini_options]
addopts = "-vv --color=yes"
log_cli = false
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_cli_format = "%(asctime)s %(levelname)s %(message)s"
log_cli_level = "INFO"
python_files = "test_*.py"
python_functions = "test_*"
testpaths = "tests"

[tool.isort]
profile = "black"
src_paths = ["cookiecutter-pypackage", "hooks", "tests"]
line_length = 99

[tool.black]
line-length = 99
target-version = ["py37", "py38"]
skip-string-normalization = true
exclude = "{{cookiecutter.project_name}}"

[tool.ruff]
select = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
ignore = []

fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}

line-length = 99

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py310"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

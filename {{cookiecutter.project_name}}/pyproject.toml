[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core>=1",
]

[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_description}}"
readme = "README.md"
authors = ["{{cookiecutter.author}} <{{cookiecutter.email}}>"]
license = "{{cookiecutter.license.upper()}}"
homepage = "https://{{cookiecutter.github_user}}.github.io/{{cookiecutter.project_name}}"
repository = "{{ cookiecutter.github_repository }}"
keywords = []
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
]

[tool.poetry.urls]
"Bug Tracker" = "{{ cookiecutter.github_repository }}/issues"
"Changelog" = "{{ cookiecutter.github_repository }}/releases"

[tool.poetry.dependencies]
python = ">=3.7,<4.0"

[tool.poetry.group.dev.dependencies]
python-semantic-release = "*"
isort = "*"
mypy = "*"
black = "*"
pre-commit = "*"
poethepoet = "*"
coverage = {extras = ["toml"], version = "*" }
pytest = "*"
pytest-cov = "*"
pytest-sugar = "*"
pytest-clarity = "*"
mkdocs = "*"
mkdocs-material = "*"
mkdocs-minify-plugin = "*"
mkdocs-redirects = "*"
mkdocstrings = { extras = ["python"], version = "*" }
mdx-truly-sane-lists = "*"
mike = "*"
ruff = "*"

[tool.black]
line-length = 99
target-version = ["py37", "py38"]
skip-string-normalization = true

[tool.ruff]
select = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
ignore = []

fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}

line-length = 99

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py310"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.isort]
profile = "black"
src_paths = ["src/{{cookiecutter.package_name}}", "tests"]
line_length = 99
known_first_party = "{{cookiecutter.package_name}}"

[tool.pytest.ini_options]
addopts = "-vv --color=yes"
log_cli = false
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_cli_format = "%(asctime)s %(levelname)s %(message)s"
log_cli_level = "INFO"
python_files = "test_*.py"
python_functions = "test_*"
testpaths = "tests"

[tool.coverage.paths]
source = ["src"]

[tool.coverage.run]
branch = true
source = ["{{cookiecutter.package_name}}"]

[tool.coverage.report]
show_missing = true
fail_under = 100
exclude_lines = ["if self.debug:", "pragma: no cover", "raise NotImplementedError", "if __name__ == .__main__.:"]
ignore_errors = true
omit = ["tests/*"]

[tool.mypy]
files = ["src/{{cookiecutter.package_name}}"]
warn_unused_configs = true
warn_return_any = true
ignore_missing_imports = true
pretty = true
color_output = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict = true

[tool.semantic_release]
version_toml = "pyproject.toml:tool.poetry.version"
changelog_components = "semantic_release.changelog.changelog_headers,semantic_release.changelog.compare_url"
build_command = "python -m pip install poetry && poetry build"
upload_to_pypi = false

[tool.vulture]
min_confidence = 95
paths = ["src/{{cookiecutter.package_name}}", "tests"]

[tool.poe.tasks]
clean = { cmd = "rm -rf ./**/__pycache__ dist site .pytest_cache .mypy_cache .coverage", help = "Clean up any auxiliary files" }
format = { shell = "poetry run isort .; poetry run black .", help = "Format your codebase" }
hooks = { cmd = "poetry run pre-commit run --all-files", help = "Run all pre-commit hooks" }
test = { cmd = "poetry run pytest --cov={{cookiecutter.package_name}}", help = "Run the test suite and produce a coverage report" }
type-check = { cmd = "poetry run mypy", help = "Run static type checking on your codebase" }
lint = { cmd = "poetry run ruff check src", help = "Lint your code for errors" }
docs = { shell = "python -c 'import webbrowser; webbrowser.open(\"http://127.0.0.1:8000\")'; poetry run mkdocs serve", help = "Build and serve the documentation" }
export = { cmd = "poetry export --without-hashes --dev -o requirements.txt" }

[tool.docformatter]
black = true
non-strict = true
non-cap = [
  "{{cookiecutter.package_name}}",
]
recursive = true
in-place = true

[tool.bandit]
recursive = true
exclude_dirs = ["tests"]
